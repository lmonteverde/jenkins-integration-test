{
	"info": {
		"_postman_id": "1c7662b4-aaa6-4015-a141-fffe960486aa",
		"name": "API_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21778326"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Login user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = pm.request.body;",
									"const requestBodyParsed = JSON.parse(requestBody.raw);",
									"",
									"pm.test(\"Validate body scheme is an valid object - pre-script\", () => {",
									"  if (typeof requestBody !== \"object\")",
									"    throw new Error(\"The request body is not a valid object\");",
									"});",
									"",
									"pm.test(\"Validate name property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.email !== \"string\")",
									"    throw new Error(\"Name must be a string\");",
									"});",
									"",
									"pm.test(\"Validate if job property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.password !== \"string\")",
									"    throw new Error(\"Job must be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"email\": {\"type\": \"string\"},",
									"        \"password\": {\"type\": \"string\"},",
									"        \"id\": {\"type\": \"string\"},",
									"        \"createdAt\": {\"type\": \"string\"}",
									"    },",
									"    \"require\": [\"email\", \"password\", \"id\", \"createdAt\"]",
									"}",
									"",
									"pm.test('Response status code is 201', () => pm.expect(pm.response.code).to.equal(201))",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validate the body content response', () => {",
									"    pm.expect(responseData).to.be.an('object')",
									"    pm.expect(responseData).to.have.property('email').to.be.an('string');",
									"    pm.expect(responseData).to.have.property('password').to.be.a('string');",
									"    pm.expect(responseData).to.have.property('id').to.be.a('string');",
									"    pm.expect(responseData).to.have.property('createdAt').to.be.a('string');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:18:23 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "104"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700151502&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=s0sbAm6Duy5n3F3rlZPfNHNXm986J%2FV%2FpKMeOmANtpo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700151502&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=s0sbAm6Duy5n3F3rlZPfNHNXm986J%2FV%2FpKMeOmANtpo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"68-n9A2rL8StZtAS6YJ8xfJ5tcCfp4\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710cacabf12009-IAD"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\",\n    \"id\": \"265\",\n    \"createdAt\": \"2023-11-16T16:18:22.983Z\"\n}"
						}
					]
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// podemos validar todo el esquema del body",
									"const schema = {",
									" \"type\": \"object\",",
									"    \"properties\": {",
									"        \"page\": { \"type\": \"number\" },",
									"        \"per_page\": { \"type\": \"number\" },",
									"        \"total\": { \"type\": \"number\" },",
									"        \"total_pages\": { \"type\": \"number\" },",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"number\" },",
									"                    \"email\": { \"type\": \"string\", \"format\": \"email\" },",
									"                    \"first_name\": { \"type\": \"string\" },",
									"                    \"last_name\": { \"type\": \"string\" },",
									"                    \"avatar\": { \"type\": \"string\", \"format\": \"uri\" }",
									"                },",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"email\",",
									"                    \"first_name\",",
									"                    \"last_name\",",
									"                    \"avatar\"",
									"                ]",
									"            }",
									"        },",
									"        \"support\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"                \"text\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [\"url\", \"text\"]",
									"        }",
									"    },",
									"    \"required\": [\"page\", \"per_page\", \"total\", \"total_pages\", \"data\", \"support\"]",
									"}",
									"",
									"pm.test('Response status code is 200', ()  => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// podemos validar el esquema del body por tipo y propiedad",
									"pm.test('Response has the required fields',  () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
									"})",
									"",
									"// valida que el primer elemento del array data y sus propiedades",
									"pm.test(\"Validate the body content response\", () => {",
									"  let data = responseData.data[0]",
									"",
									"  pm.expect(responseData).to.have.property(\"data\").to.be.an(\"array\");",
									"  pm.expect(data).to.have.property(\"id\").to.be.a(\"number\");",
									"  pm.expect(data).to.have.property(\"first_name\").to.be.a(\"string\");",
									"  pm.expect(data).to.have.property(\"last_name\").to.be.a(\"string\");",
									"  pm.expect(data).to.have.property(\"email\").to.be.a(\"string\");",
									"});",
									"",
									"// valida cada elemento del array data y sus propiedades",
									"pm.test(\"Validate the response body\", () => {",
									"    let data = responseData.data",
									"",
									"    pm.expect(responseData).to.have.property(\"data\").to.be.an(\"array\");",
									"",
									"    // Itera sobre cada elemento en el array 'data'",
									"    data.forEach((item, index) => {",
									"        pm.test(`Validating data element ${index + 1}`, () => {",
									"            pm.expect(item).to.be.an(\"object\");",
									"            pm.expect(item).to.have.property(\"id\").to.be.a(\"number\");",
									"            pm.expect(item).to.have.property(\"first_name\").to.be.a(\"string\");",
									"            pm.expect(item).to.have.property(\"last_name\").to.be.a(\"string\");",
									"            pm.expect(item).to.have.property(\"email\").to.be.a(\"string\");",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test('Id must be a number', () => {",
									"    pm.expect(responseData.data.forEach(user => {",
									"        typeof user.id === 'number'",
									"    }))",
									"})",
									"",
									"pm.test('Email is in a valid format', () => {",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(user => {",
									"        pm.expect(user.email).to.match(emailRegex, 'Email should be in a valid format');",
									"    });",
									"})",
									"",
									"pm.test('Avatar is a non-empty string', () => {",
									"    pm.expect(responseData.data).to.be.an('array');",
									"",
									"    responseData.data.forEach(user => {",
									"        pm.expect(user.avatar).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"    });",
									"})",
									"",
									"pm.test('Avatar is a valid URL', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"",
									"    responseData.data.forEach(user => {",
									"        pm.expect(user.avatar).to.match(urlPattern, \"Avatar should be a valid URL\");",
									"    });",
									"});",
									"",
									"pm.test('Support must be an object', () => {",
									"    pm.expect(responseData.support).to.be.an('object')",
									"})",
									"",
									"pm.test('Support URL propertie must have a valid patter', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"",
									"    pm.expect(responseData.support.url).to.match(urlPattern)",
									"})",
									"",
									"pm.test(\"Getting an Id as global variable\", () => {",
									"  let userId = responseData.data[0].id // capturamos del Id del primer usuario con Id 1",
									"",
									"  console.log(\"User id is:\", userId)",
									"  pm.collectionVariables.set(\"userId\", userId); // lo seteamos como variable de ambiente dinamicamente",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Get all users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:18:44 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700053886&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=DRJK7Z%2F9LQ4BwnpkgYEvKtZefG%2FiqkKyWTSzjUZkGUo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700053886&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=DRJK7Z%2F9LQ4BwnpkgYEvKtZefG%2FiqkKyWTSzjUZkGUo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"3e4-2RLXvr5wTg9YQ6aH95CkYoFNuO8\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=14400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "HIT"
								},
								{
									"key": "Age",
									"value": "3889"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710d32ffb081d5-IAD"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
						}
					]
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = pm.request.body;",
									"const requestBodyParsed = JSON.parse(requestBody.raw);",
									"",
									"pm.test(\"Validate body scheme is an valid object - pre-script\", () => {",
									"  if (typeof requestBody !== \"object\")",
									"    throw new Error(\"The request body is not a valid object\");",
									"});",
									"",
									"pm.test(\"Validate name property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.name !== \"string\")",
									"    throw new Error(\"Name must be a string\");",
									"});",
									"",
									"pm.test(\"Validate if job property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.job !== \"string\")",
									"    throw new Error(\"Job must be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": {\"type\": \"string\"},",
									"        \"job\": {\"type\": \"string\"},",
									"        \"id\": {\"type\": \"string\"},",
									"        \"createdAt\": {\"type\": \"string\"}",
									"    },",
									"    \"require\": [\"name\", \"job\", \"id\", \"createdAt\"]",
									"}",
									"",
									"pm.test('Response status code is 201', () => pm.expect(pm.response.code).to.equal(201))",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validate the body content response', () => {",
									"    pm.expect(responseData).to.be.an('object')",
									"    pm.expect(responseData).to.have.property('name').to.be.an('string');",
									"    pm.expect(responseData).to.have.property('job').to.be.a('string');",
									"    pm.expect(responseData).to.have.property('id').to.be.a('string');",
									"    pm.expect(responseData).to.have.property('createdAt').to.be.a('string');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"new user\",\n    \"job\": \"test user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new user\",\n    \"job\": \"test user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:18:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "87"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700151535&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=%2BaaCPiRXzVIdlc29df7dDPVbZuQLSyAi9Kh5CYFcod8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700151535&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=%2BaaCPiRXzVIdlc29df7dDPVbZuQLSyAi9Kh5CYFcod8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"57-+mkfzrcNRPp+TC+PINKZiMuYoxU\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710d79dec20853-IAD"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"new user\",\n    \"job\": \"test user\",\n    \"id\": \"663\",\n    \"createdAt\": \"2023-11-16T16:18:55.809Z\"\n}"
						}
					]
				},
				{
					"name": "Get user by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = pm.environment.get(\"userId\") // instanciamos la variable de ambiente",
									"",
									"pm.test(\"Validate if userId exists as variable - pre-script\", () => {",
									"    userId !== undefined",
									"        ? console.log(\"User Id is:\" , userId)",
									"        : console.log(\"User Id is undefined\")",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									" \"type\": \"object\",",
									"    \"properties\": {",
									"        \"data\": {",
									"            \"type\": \"object\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"number\" },",
									"                    \"email\": { \"type\": \"string\", \"format\": \"email\" },",
									"                    \"first_name\": { \"type\": \"string\" },",
									"                    \"last_name\": { \"type\": \"string\" },",
									"                    \"avatar\": { \"type\": \"string\", \"format\": \"uri\" }",
									"                },",
									"                \"required\": [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"]",
									"            }",
									"        },",
									"        \"support\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"                \"text\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [\"url\", \"text\"]",
									"        }",
									"    },",
									"    \"required\": [\"data\", \"support\"]",
									"}",
									"",
									"pm.test('Response status code is 200', () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test('Response has the required fields', () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('data', 'support');",
									"})",
									"",
									"pm.test('Validate the body content response', () => {",
									"    const data = responseData.data;",
									"    pm.expect(responseData).to.have.property('data').to.be.an('object');",
									"    pm.expect(data).to.have.property('id').to.be.a('number');",
									"    pm.expect(data).to.have.property('first_name').to.be.a('string');",
									"    pm.expect(data).to.have.property('last_name').to.be.a('string');",
									"    pm.expect(data).to.have.property('email').to.be.a('string');",
									"})",
									"",
									"pm.test('Email is in a valid format', () => {",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(responseData.data.email).to.be.an('string');",
									"    pm.expect(responseData.data.email).to.match(emailRegex, 'Email should be in a valid format');",
									"})",
									"",
									"pm.test('Avatar is a non-empty string', () => {",
									"    pm.expect(responseData.data.avatar).to.be.an('string');",
									"    pm.expect(responseData.data.avatar).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Avatar is a valid URL', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"    pm.expect(responseData.data.avatar).to.match(urlPattern, 'Avatar should be a valid URL');",
									"})",
									"",
									"pm.test('Support must be an object', () => {",
									"    pm.expect(responseData.support).to.be.an('object');",
									"})",
									"",
									"pm.test('Support URL propertie must have a valid patter', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"    pm.expect(responseData.support.url).to.match(urlPattern);",
									"})",
									"",
									"pm.collectionVariables.set('Avatar URL', responseData.data.avatar)",
									"",
									"pm.test(\"Getting and setting Avatar URL as variable and send requests\", () => {",
									"    const avatarUrl = responseData.data.avatar",
									"    ",
									"    // Set the avatar as a variable",
									"    pm.collectionVariables.set(\"avatarURL\", avatarUrl)",
									"",
									"    if (avatarUrl) {",
									"        const avatarReq = pm.collectionVariables.get(\"avatarURL\")",
									"        pm.sendRequest(avatarReq, (err, res) => {",
									"            if (err) {",
									"                throw new Error(err)",
									"            }",
									"",
									"            pm.test('response should be okay to process', () => {",
									"                pm.expect(err).to.equal(null);",
									"                pm.expect(res).to.have.property('code', 200);",
									"                pm.expect(res).to.have.property('status', 'OK');",
									"                console.log(res)",
									"            });",
									"        })",
									"    }",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get user by Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{userId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:19:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"118-P3iKcVpIgCj9HqYeOOrGLX8qJVc\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=14400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "HIT"
								},
								{
									"key": "Age",
									"value": "2952"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=hQhkpMrDDwyA7f3gJ3cfqJT5Rgs0R3KeDCIaFTSpz4DJIebZ7%2B7dVWmnPHbxSlLwg3IUGEWp3oc3WMqKXfQSGIMgYVdlypJChcAvHizfE2q3Olvmc26nLnKyJg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710dba798b594f-IAD"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1,\n        \"email\": \"george.bluth@reqres.in\",\n        \"first_name\": \"George\",\n        \"last_name\": \"Bluth\",\n        \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n    },\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = pm.request.body;",
									"const requestBodyParsed = JSON.parse(requestBody.raw);",
									"",
									"pm.test(\"Validate body scheme is an valid object - pre-script\", () => {",
									"  if (typeof requestBody !== \"object\")",
									"    throw new Error(\"The request body is not a valid object\");",
									"});",
									"",
									"pm.test(\"Validate name property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.name !== \"string\")",
									"    throw new Error(\"Name must be a string\");",
									"});",
									"",
									"pm.test(\"Validate if job property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.job !== \"string\")",
									"    throw new Error(\"Job must be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": {\"type\": \"string\"},",
									"        \"job\": {\"type\": \"string\"},",
									"        \"createdAt\": {\"type\": \"string\"}",
									"    },",
									"    \"require\": [\"name\", \"job\", \"createdAt\"]",
									"}",
									"",
									"pm.test(\"Response status code is 200\", () =>",
									"  pm.expect(pm.response.code).to.equal(200)",
									");",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Validate the body content response\", () => {",
									"  pm.expect(responseData).to.have.property(\"name\").to.be.an(\"string\");",
									"  pm.expect(responseData).to.have.property(\"job\").to.be.a(\"string\"); ",
									"  pm.expect(responseData).to.have.property(\"updatedAt\").to.be.a(\"string\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"new name\",\n    \"job\": \"new job\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "Update user",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new name\",\n    \"job\": \"new job\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{userId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:19:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700151555&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=xBPdlcdpsX8OuRGlgpf%2F%2F%2B8leRfPjQK8upgWWG7ZaDA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700151555&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=xBPdlcdpsX8OuRGlgpf%2F%2F%2B8leRfPjQK8upgWWG7ZaDA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"4a-XzdGSdK1/JLUq/F1nxSwYB8mkCo\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710df4bea182de-IAD"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"new name\",\n    \"job\": \"new job\",\n    \"updatedAt\": \"2023-11-16T16:19:15.489Z\"\n}"
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = pm.collectionVariables.get(\"userId\") // instanciamos la variable de ambiente",
									"",
									"pm.test(\"Validate if userId exists as variable - pre-script\", () => {",
									"    userId !== undefined",
									"        ? console.log(\"User Id is:\" , userId)",
									"        : console.log(\"User Id is undefined\")",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 204', ()  => {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete user",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{userId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:19:25 GMT"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700151564&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rCqRvXFwFqpRmdHM0pEeloa%2BBb3QVZJKF%2F6%2BKAuGhWQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700151564&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rCqRvXFwFqpRmdHM0pEeloa%2BBb3QVZJKF%2F6%2BKAuGhWQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710e30197b0853-IAD"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status code is 404\", () => {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response is an empty object\", () => {",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.be.empty;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/90784",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"90784"
							]
						}
					},
					"response": [
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/90784",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"90784"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 16:20:38 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700151638&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=jCwfrzP%2Bf021iGeggHWtVW0eN2hSAvtWG1IPSneaAEg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700151638&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=jCwfrzP%2Bf021iGeggHWtVW0eN2hSAvtWG1IPSneaAEg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=14400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "MISS"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "82710ffc7e9b2d26-IAD"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "Avatar URL",
			"value": ""
		},
		{
			"key": "avatarURL",
			"value": ""
		}
	]
}