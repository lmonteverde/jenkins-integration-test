{
	"info": {
		"_postman_id": "1c7662b4-aaa6-4015-a141-fffe960486aa",
		"name": "API_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21778326"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// podemos validar todo el esquema del body",
									"const schema = {",
									" \"type\": \"object\",",
									"    \"properties\": {",
									"        \"page\": { \"type\": \"number\" },",
									"        \"per_page\": { \"type\": \"number\" },",
									"        \"total\": { \"type\": \"number\" },",
									"        \"total_pages\": { \"type\": \"number\" },",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"number\" },",
									"                    \"email\": { \"type\": \"string\", \"format\": \"email\" },",
									"                    \"first_name\": { \"type\": \"string\" },",
									"                    \"last_name\": { \"type\": \"string\" },",
									"                    \"avatar\": { \"type\": \"string\", \"format\": \"uri\" }",
									"                },",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"email\",",
									"                    \"first_name\",",
									"                    \"last_name\",",
									"                    \"avatar\"",
									"                ]",
									"            }",
									"        },",
									"        \"support\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"                \"text\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [\"url\", \"text\"]",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"page\",",
									"        \"per_page\",",
									"        \"total\",",
									"        \"total_pages\",",
									"        \"data\",",
									"        \"support\"",
									"    ]",
									"}",
									"",
									"pm.test('Response status code is 200', ()  => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"// podemos validar el esquema del body por tipo y propiedad",
									"pm.test('Response has the required fields',  () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
									"})",
									"",
									"// valida que el primer elemento del array data y sus propiedades",
									"pm.test(\"Validate the body content response\", () => {",
									"  let data = responseData.data[0]",
									"",
									"  pm.expect(responseData).to.have.property(\"data\").to.be.an(\"array\");",
									"  pm.expect(data).to.have.property(\"id\").to.be.a(\"number\");",
									"  pm.expect(data).to.have.property(\"first_name\").to.be.a(\"string\");",
									"  pm.expect(data).to.have.property(\"last_name\").to.be.a(\"string\");",
									"  pm.expect(data).to.have.property(\"email\").to.be.a(\"string\");",
									"});",
									"",
									"// valida cada elemento del array data y sus propiedades",
									"pm.test(\"Validate the response body\", () => {",
									"    let data = responseData.data",
									"",
									"    pm.expect(responseData).to.have.property(\"data\").to.be.an(\"array\");",
									"",
									"    // Itera sobre cada elemento en el array 'data'",
									"    data.forEach((item, index) => {",
									"        pm.test(`Validating data element ${index + 1}`, () => {",
									"            pm.expect(item).to.be.an(\"object\");",
									"            pm.expect(item).to.have.property(\"id\").to.be.a(\"number\");",
									"            pm.expect(item).to.have.property(\"first_name\").to.be.a(\"string\");",
									"            pm.expect(item).to.have.property(\"last_name\").to.be.a(\"string\");",
									"            pm.expect(item).to.have.property(\"email\").to.be.a(\"string\");",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test('Id must be a number', () => {",
									"    pm.expect(responseData.data.forEach(user => {",
									"        typeof user.id === 'number'",
									"    }))",
									"})",
									"",
									"pm.test('Email is in a valid format', () => {",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(user => {",
									"        pm.expect(user.email).to.match(emailRegex, 'Email should be in a valid format');",
									"    });",
									"})",
									"",
									"pm.test('Avatar is a non-empty string', () => {",
									"    pm.expect(responseData.data).to.be.an('array');",
									"",
									"    responseData.data.forEach(user => {",
									"        pm.expect(user.avatar).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"    });",
									"})",
									"",
									"pm.test('Avatar is a valid URL', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"",
									"    responseData.data.forEach(user => {",
									"        pm.expect(user.avatar).to.match(urlPattern, \"Avatar should be a valid URL\");",
									"    });",
									"});",
									"",
									"pm.test('Support must be an object', () => {",
									"    pm.expect(responseData.support).to.be.an('object')",
									"})",
									"",
									"pm.test('Support URL propertie must have a valid patter', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"",
									"    pm.expect(responseData.support.url).to.match(urlPattern)",
									"})",
									"",
									"pm.test(\"Getting an Id as global variable\", () => {",
									"  let userId = responseData.data[0].id // capturamos del Id del primer usuario con Id 1",
									"",
									"  console.log(\"User id is:\", userId)",
									"  pm.collectionVariables.set(\"userId\", userId); // lo seteamos como variable de ambiente dinamicamente",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = pm.request.body;",
									"const requestBodyParsed = JSON.parse(requestBody.raw);",
									"",
									"pm.test(\"Validate body scheme is an valid object - pre-script\", () => {",
									"  if (typeof requestBody !== \"object\")",
									"    throw new Error(\"The request body is not a valid object\");",
									"});",
									"",
									"pm.test(\"Validate name property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.name !== \"string\")",
									"    throw new Error(\"Name must be a string\");",
									"});",
									"",
									"pm.test(\"Validate if job property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.job !== \"string\")",
									"    throw new Error(\"Job must be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": {\"type\": \"string\"},",
									"        \"job\": {\"type\": \"string\"},",
									"        \"id\": {\"type\": \"string\"},",
									"        \"createdAt\": {\"type\": \"string\"}",
									"    },",
									"    \"require\": [",
									"        \"name\",",
									"        \"job\",",
									"        \"id\",",
									"        \"createdAt\"",
									"    ]",
									"}",
									"",
									"pm.test('Response status code is 201', () => pm.expect(pm.response.code).to.equal(201))",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Validate the body content response', () => {",
									"    pm.expect(responseData).to.be.an('object')",
									"    pm.expect(responseData).to.have.property('name').to.be.an('string');",
									"    pm.expect(responseData).to.have.property('job').to.be.a('string');",
									"    pm.expect(responseData).to.have.property('id').to.be.a('string');",
									"    pm.expect(responseData).to.have.property('createdAt').to.be.a('string');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"new user\",\n    \"job\": \"test user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = pm.environment.get(\"userId\") // instanciamos la variable de ambiente",
									"",
									"pm.test(\"Validate if userId exists as variable - pre-script\", () => {",
									"    userId !== undefined",
									"        ? console.log(\"User Id is:\" , userId)",
									"        : console.log(\"User Id is undefined\")",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									" \"type\": \"object\",",
									"    \"properties\": {",
									"        \"data\": {",
									"            \"type\": \"object\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": { \"type\": \"number\" },",
									"                    \"email\": { \"type\": \"string\", \"format\": \"email\" },",
									"                    \"first_name\": { \"type\": \"string\" },",
									"                    \"last_name\": { \"type\": \"string\" },",
									"                    \"avatar\": { \"type\": \"string\", \"format\": \"uri\" }",
									"                },",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"email\",",
									"                    \"first_name\",",
									"                    \"last_name\",",
									"                    \"avatar\"",
									"                ]",
									"            }",
									"        },",
									"        \"support\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"                \"text\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [\"url\", \"text\"]",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"data\",",
									"        \"support\"",
									"    ]",
									"}",
									"",
									"pm.test('Response status code is 200', () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test('Response has the required fields', () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('data', 'support');",
									"})",
									"",
									"pm.test('Validate the body content response', () => {",
									"    const data = responseData.data;",
									"    pm.expect(responseData).to.have.property('data').to.be.an('object');",
									"    pm.expect(data).to.have.property('id').to.be.a('number');",
									"    pm.expect(data).to.have.property('first_name').to.be.a('string');",
									"    pm.expect(data).to.have.property('last_name').to.be.a('string');",
									"    pm.expect(data).to.have.property('email').to.be.a('string');",
									"})",
									"",
									"pm.test('Email is in a valid format', () => {",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(responseData.data.email).to.be.an('string');",
									"    pm.expect(responseData.data.email).to.match(emailRegex, 'Email should be in a valid format');",
									"})",
									"",
									"pm.test('Avatar is a non-empty string', () => {",
									"    pm.expect(responseData.data.avatar).to.be.an('string');",
									"    pm.expect(responseData.data.avatar).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Avatar is a valid URL', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"    pm.expect(responseData.data.avatar).to.match(urlPattern, 'Avatar should be a valid URL');",
									"})",
									"",
									"pm.test('Support must be an object', () => {",
									"    pm.expect(responseData.support).to.be.an('object');",
									"})",
									"",
									"pm.test('Support URL propertie must have a valid patter', () => {",
									"    const urlPattern = new RegExp(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i);",
									"    pm.expect(responseData.support.url).to.match(urlPattern);",
									"})",
									"",
									"pm.collectionVariables.set('Avatar URL', responseData.data.avatar)",
									"",
									"pm.test(\"Getting and setting Avatar URL as variable and send requests\", () => {",
									"    const avatarUrl = responseData.data.avatar",
									"    ",
									"    // Set the avatar as a variable",
									"    pm.collectionVariables.set(\"avatarURL\", avatarUrl)",
									"",
									"    if (avatarUrl) {",
									"        const avatarReq = pm.collectionVariables.get(\"avatarURL\")",
									"        pm.sendRequest(avatarReq, (err, res) => {",
									"            if (err) {",
									"                throw new Error(err)",
									"            }",
									"",
									"            pm.test('response should be okay to process', () => {",
									"                pm.expect(err).to.equal(null);",
									"                pm.expect(res).to.have.property('code', 200);",
									"                pm.expect(res).to.have.property('status', 'OK');",
									"                console.log(res)",
									"            });",
									"        })",
									"    }",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = pm.request.body;",
									"const requestBodyParsed = JSON.parse(requestBody.raw);",
									"",
									"pm.test(\"Validate body scheme is an valid object - pre-script\", () => {",
									"  if (typeof requestBody !== \"object\")",
									"    throw new Error(\"The request body is not a valid object\");",
									"});",
									"",
									"pm.test(\"Validate name property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.name !== \"string\")",
									"    throw new Error(\"Name must be a string\");",
									"});",
									"",
									"pm.test(\"Validate if job property is valid - pre-script\", () => {",
									"  if (typeof requestBodyParsed.job !== \"string\")",
									"    throw new Error(\"Job must be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": {\"type\": \"string\"},",
									"        \"job\": {\"type\": \"string\"},",
									"        \"createdAt\": {\"type\": \"string\"}",
									"    },",
									"    \"require\": [",
									"        \"name\",",
									"        \"job\",",
									"        \"createdAt\"",
									"    ]",
									"}",
									"",
									"pm.test(\"Response status code is 200\", () =>",
									"  pm.expect(pm.response.code).to.equal(200)",
									");",
									"",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Validate the body content response\", () => {",
									"  pm.expect(responseData).to.have.property(\"name\").to.be.an(\"string\");",
									"  pm.expect(responseData).to.have.property(\"job\").to.be.a(\"string\"); ",
									"  pm.expect(responseData).to.have.property(\"updatedAt\").to.be.a(\"string\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"new name\",\n    \"job\": \"new job\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 204', ()  => {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = pm.collectionVariables.get(\"userId\") // instanciamos la variable de ambiente",
									"",
									"pm.test(\"Validate if userId exists as variable - pre-script\", () => {",
									"    userId !== undefined",
									"        ? console.log(\"User Id is:\" , userId)",
									"        : console.log(\"User Id is undefined\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "Avatar URL",
			"value": ""
		},
		{
			"key": "avatarURL",
			"value": ""
		}
	]
}